// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ItemQuantityType {
  store
  stock
  production
  delivery
}

enum ProductionState {
  pending
  completed
  damaged
  return
}

model Users {
  id             String   @id @default(uuid()) @db.Uuid
  emp_id         String   @unique @map("emp_id")
  name           String   @map("name")
  mobile         String   @unique @map("mobile")
  email          String?  @unique @map("email")
  address        String?  @default("") @map("address")
  role           String[] @map("role")
  status         Boolean  @map("status")
  password       String?  @map("password")
  tmp_password   String?  @map("tmp_password")
  pin_code       String?  @map("pin_code")
  tokens         Json?    @map("tokens")
  refresh_tokens Json?    @map("refresh_tokens")
  login_attempts Int?     @default(0) @map("login_attempts")

  // Relations
  categoriesCreated  Category[]     @relation("UsersCategoryCreatedBy")
  categoriesUpdated  Category[]     @relation("UsersCategoryUpdatedBy")
  subCategoryCreated SubCategory[]  @relation("UsersSubCategoryCreatedBy")
  subCategoryUpdated SubCategory[]  @relation("UsersSubCategoryUpdatedBy")
  stockItemUpdated   StockItems[]   @relation("UsersStockItemUpdatedBy")
  ActivityLog        ActivityLog[]  @relation("ActivityLogUserRelation")
  ItemRequests       ItemRequests[] @relation("ItemRequestUserRelation")
  ItemActionTakenBy  ItemRequests[] @relation("ActionTakenByRelation")

  @@map("users")
}

model Role {
  id     Int     @id @unique @default(autoincrement())
  name   String  @map("name")
  code   String  @unique @map("code")
  status Boolean @default(true)

  @@map("roles")
}

model Category {
  id        Int       @id @unique @default(autoincrement())
  name      String    @map("name")
  code      String    @unique @map("code")
  status    Boolean   @map("status")
  createdBy String    @db.Uuid
  updatedBy String?   @db.Uuid
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  creator      Users         @relation("UsersCategoryCreatedBy", fields: [createdBy], references: [id])
  updater      Users?        @relation("UsersCategoryUpdatedBy", fields: [updatedBy], references: [id])
  mainCategory SubCategory[] @relation("CategoryRelation")
  StockItems   StockItems[]  @relation("ItemCategoryRelation")

  @@map("category")
}

model SubCategory {
  id           Int          @id @unique @default(autoincrement())
  name         String       @map("name")
  code         String       @unique @map("code")
  status       Boolean      @map("status")
  category     Int          @map("category")
  type         String[]
  createdBy    String       @db.Uuid
  updatedBy    String?      @db.Uuid
  createdAt    DateTime     @default(now())
  updatedAt    DateTime?    @updatedAt
  creator      Users        @relation("UsersSubCategoryCreatedBy", fields: [createdBy], references: [id])
  updater      Users?       @relation("UsersSubCategoryUpdatedBy", fields: [updatedBy], references: [id])
  mainCategory Category     @relation("CategoryRelation", fields: [category], references: [id])
  StockItems   StockItems[] @relation("ItemSubCategoryRelation")

  @@map("subcategory")
}

model StockItems {
  id              Int            @id @unique @default(autoincrement())
  name            String
  code            String         @unique
  image           String?
  category        Int            @map("category")
  sub_category    Int?           @map("sub_category")
  description     String
  reorder_level   Int
  updatedBy       String?        @db.Uuid
  updatedAt       DateTime?
  createdAt       DateTime       @default(now())
  status          Boolean        @default(true)
  updater         Users?         @relation("UsersStockItemUpdatedBy", fields: [updatedBy], references: [id])
  itemCategory    Category       @relation("ItemCategoryRelation", fields: [category], references: [id])
  itemSubCategory SubCategory?   @relation("ItemSubCategoryRelation", fields: [sub_category], references: [id])
  ItemRequests    ItemRequests[] @relation("StockItemIdRelation")
  ItemQuantity    Stock[]        @relation("ItemRelation")

  @@map("stock_items")
}

model ActivityLog {
  id          Int      @id @unique @default(autoincrement())
  method      String
  path        String
  description Json?
  userId      String?  @db.Uuid
  createdAt   DateTime @default(now())
  user        Users?   @relation("ActivityLogUserRelation", fields: [userId], references: [id])

  @@map("activity_log")
}

model ItemRequests {
  id            Int       @id @unique @default(autoincrement())
  request_id    String
  item_id       Int       @map("item_id")
  quantity      Int
  note          String?
  remark        String?
  reject_reason String?
  status        Int // 1 for pending,2 for accept, 0 for rejected
  type          String
  userId        String?   @map("userId") @db.Uuid
  user_role     Int       @default(1)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime?
  action_taken  String?   @db.Uuid
  action_date   DateTime?

  user        Users?     @relation("ItemRequestUserRelation", fields: [userId], references: [id])
  stockItem   StockItems @relation("StockItemIdRelation", fields: [item_id], references: [id])
  actionTaken Users?     @relation("ActionTakenByRelation", fields: [action_taken], references: [id])

  @@map("item_requests")
}

model Stock {
  id               Int              @id @unique @default(autoincrement())
  item_id          Int
  type             ItemQuantityType // store, stock, production, delivery
  quantity         Int
  production_state ProductionState  @default(pending)
  unit_price       Float?           @default(0)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime?

  item StockItems @relation("ItemRelation", fields: [item_id], references: [id])

  @@map("stock")
}
