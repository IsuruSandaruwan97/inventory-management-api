// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id             String  @id @default(uuid()) @db.Uuid
  emp_id         String  @unique @map("emp_id")
  name           String  @map("name")
  mobile         String  @unique @map("mobile")
  email          String? @unique @map("email")
  address        String? @default("") @map("address")
  role           String  @map("role")
  status         Boolean @map("status")
  password       String? @map("password")
  tmp_password   String? @map("tmp_password")
  pin_code       String? @map("pin_code")
  tokens         Json?   @map("tokens")
  refresh_tokens Json?   @map("refresh_tokens")
  login_attempts Int?    @default(0) @map("login_attempts")

  categoriesCreated  Category[]    @relation("UsersCategoryCreatedBy")
  categoriesUpdated  Category[]    @relation("UsersCategoryUpdatedBy")
  subCategoryCreated SubCategory[] @relation("UsersSubCategoryCreatedBy")
  subCategoryUpdated SubCategory[] @relation("UsersSubCategoryUpdatedBy")
  stockItemUpdated   StockItems[]  @relation("UsersStockItemUpdatedBy")

  @@map("users")
}

model Category {
  id        Int       @id @unique @default(autoincrement())
  name      String    @map("name")
  code      String    @unique @map("code")
  status    Boolean   @map("status")
  type      Json      @map("type")
  createdBy String    @db.Uuid
  updatedBy String?   @db.Uuid
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  creator      Users         @relation("UsersCategoryCreatedBy", fields: [createdBy], references: [id])
  updater      Users?        @relation("UsersCategoryUpdatedBy", fields: [updatedBy], references: [id])
  mainCategory SubCategory[] @relation("CategoryRelation")
  StockItems   StockItems[]  @relation("ItemCategoryRelation")

  @@map("category")
}

model SubCategory {
  id        Int       @id @unique @default(autoincrement())
  name      String    @map("name")
  code      String    @unique @map("code")
  status    Boolean   @map("status")
  category  Int       @map("category")
  createdBy String    @db.Uuid
  updatedBy String?   @db.Uuid
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  creator      Users        @relation("UsersSubCategoryCreatedBy", fields: [createdBy], references: [id])
  updater      Users?       @relation("UsersSubCategoryUpdatedBy", fields: [updatedBy], references: [id])
  mainCategory Category     @relation("CategoryRelation", fields: [category], references: [id])
  StockItems   StockItems[] @relation("ItemSubCategoryRelation")

  @@map("subcategory")
}

model StockItems {
  id            Int       @id @unique @default(autoincrement())
  name          String
  code          String    @unique
  image         String?
  category      Int       @map("category")
  sub_category  Int?      @map("sub_category")
  description   String
  reorder_level Int
  unit_price    Decimal   @db.Decimal(10, 2)
  last_order    DateTime
  quantity      Int
  updatedBy     String?   @db.Uuid
  updatedAt     DateTime?
  createdAt     DateTime  @default(now())

  updater         Users?       @relation("UsersStockItemUpdatedBy", fields: [updatedBy], references: [id])
  itemCategory    Category     @relation("ItemCategoryRelation", fields: [category], references: [id])
  itemSubCategory SubCategory? @relation("ItemSubCategoryRelation", fields: [sub_category], references: [id])

  @@map("stock_items")
}
